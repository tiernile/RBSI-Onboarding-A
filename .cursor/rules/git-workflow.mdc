---
alwaysApply: true
---

# Git Workflow & Commit Guidelines - RBSI Onboarding

## Branching Strategy

**Main Branch Only (Current)**
- All work commits directly to `main` branch for prototype velocity
- No feature branches required during development phase
- Main branch should always be in working state
- Run `pnpm dev` test before pushing to verify nothing is broken

## Commit Message Format

Use **Conventional Commits** format for clear history and automated tooling:

```
<type>(<scope>): <description>

<body (optional)>

<footer (optional)>
```

### Commit Types
- `feat:` - New features, components, or significant functionality
- `fix:` - Bug fixes, corrections, styling issues
- `docs:` - Documentation changes, README updates, session contexts
- `style:` - Formatting, CSS, design system updates (no logic changes)
- `refactor:` - Code restructuring without changing functionality
- `test:` - Adding or modifying tests
- `chore:` - Build, dependencies, tooling, maintenance

### Commit Scopes (Optional)
- `prototype:` - Changes to Vue/Nuxt app in [apps/prototype/](mdc:apps/prototype)
- `docs:` - Changes to [Documents/](mdc:Documents) area
- `data:` - Changes to [data/schemas/](mdc:data/schemas) or mappings
- `components:` - KYCP component library changes
- `mission-control:` - Mission Control dashboard changes

### Examples

**Good Commits:**
```bash
feat(components): add KycpCheckbox component with validation

- Implements checkbox input with proper ARIA attributes
- Supports v-model binding and error states
- Matches KYCP design specifications
- Added to component showcase

feat: add multi-select journey filtering to Mission Control

docs: update session-context-003 with component expansion progress

fix(prototype): resolve CSS variable scoping in KycpSelect dropdown

style(mission-control): update status pill colors for better contrast

refactor(data): normalize schema validation patterns across journeys

chore: update dependencies to latest Nuxt 3.x version
```

**Avoid:**
```bash
# Too vague
fix: stuff
update files

# No context
WIP
temp
asdf
```

## Pre-Commit Checklist

Before committing, ensure:

**1. Code Quality**
- [ ] Run `pnpm dev` and verify app starts without errors
- [ ] Test changed functionality in browser
- [ ] No console errors or warnings
- [ ] Components render correctly in showcase (if applicable)

**2. Files & Organization**
- [ ] No temporary files (.tmp, .temp, test.*)
- [ ] No sensitive data (passwords, tokens, PII)
- [ ] Generated files excluded ([data/generated/](mdc:data/generated) should be gitignored)
- [ ] Documentation updated if public API changed

**3. Session Context**
- [ ] Major changes documented in [Documents/01 Areas/session-context/](mdc:Documents/01 Areas/session-context)
- [ ] Status updates reflected in current session file

## Collaboration Guidelines

**Authentication**
- Always commit as your proper identity: `git config --global user.name "Your Name"`
- Use GitHub CLI (`gh auth login`) for seamless authentication
- Repository: `https://github.com/tiernile/RBSI-Onboarding-A.git`

**Sync Practices**
```bash
# Before starting work
git pull origin main

# Regular pushes (don't hoard commits)
git push origin main

# Check status frequently
git status
```

**Communication**
- Commit frequently with small, focused changes
- Write descriptive commit messages (future you will thank you)
- Include context in commit body for complex changes
- Update session context files for significant progress

## File-Specific Guidelines

**Vue Components ([apps/prototype/components/](mdc:apps/prototype/components))**
```bash
feat(components): add KycpDatePicker component

- Implements accessible date input with calendar popup
- Supports min/max date validation
- Integrates with useValidation composable
- Added comprehensive prop types and documentation
```

**Schema Changes ([data/schemas/](mdc:data/schemas))**
```bash
feat(data): add account-opening journey schema

- 12 fields across 3 sections
- Conditional logic for entity types
- Validation rules aligned with RBSI requirements
- Registered in manifest.yaml
```

**Documentation Updates ([Documents/](mdc:Documents))**
```bash
docs: complete session-context-003 with accessibility improvements

- Documented WCAG 2.2 AA compliance work
- Added error summary implementation notes
- Updated component status tracking
- Next session priorities identified
```

**Mission Control ([apps/prototype/pages/index.vue](mdc:apps/prototype/pages/index.vue))**
```bash
feat(mission-control): add journey export batch functionality

- Bulk CSV export for multiple journeys
- Admin-only feature with proper authentication
- Progress indicator for long-running exports
- Error handling and user feedback
```

## Emergency Fixes

If main branch is broken:

1. **Immediate Fix**
   ```bash
   git revert <commit-hash>  # Revert the breaking commit
   git push origin main
   ```

2. **Or Quick Hotfix**
   ```bash
   # Make minimal fix
   git add .
   git commit -m "fix: resolve critical build error in KycpComponent"
   git push origin main
   ```

## Repository Health

**Keep It Clean**
- Remove unused files regularly
- Update [.gitignore](mdc:.gitignore) as needed
- Archive old session contexts to prevent clutter
- Prune large files that shouldn't be in Git

**Performance**
- Don't commit [apps/prototype/node_modules/](mdc:apps/prototype/node_modules)
- Don't commit build outputs ([apps/prototype/.nuxt/](mdc:apps/prototype/.nuxt))
- Keep [data/generated/](mdc:data/generated) gitignored (local only)

## Migration Note

This workflow may evolve as the project grows:
- **Later**: Feature branches for major changes
- **Later**: Pull request reviews for quality gates
- **Later**: Automated testing and deployment

For now, prioritize **velocity** and **clear communication** through good commit practices.

---
**Remember**: This is a high-fidelity prototype. Commit often, communicate clearly, and keep the main branch working!